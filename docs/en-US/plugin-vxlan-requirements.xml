<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "cloudstack.ent">
%BOOK_ENTITIES;
]>

<!-- Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->

<chapter id="vxlan-requirements">
  <title>System Requirements for VXLAN</title>
  <section id="vxlan-table-of-requirement">  
    <title>System Requirements for VXLAN</title>
    <para>In &PRODUCT; 4.X.0, this plugin only supports the KVM hypervisor with the standard linux bridge.</para>
    
    <para>The following table lists the requirements for the hypervisor.</para>
    <table>
      <title>Hypervisor Requirement for VXLAN</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Item</entry>
            <entry>Requirement</entry>
            <entry>Note</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Hypervisor</entry>
            <entry>KVM</entry>
            <entry>OvsVifDriver is not supported by this plugin in &PRODUCT; 4.X, use BridgeVifDriver (default).</entry>
          </row>
          <row>
            <entry>Linux kernel</entry>
            <entry>version &gt;= 3.7, VXLAN kernel module enabled</entry>
            <entry>It is recommended to use kernel &gt;=3.9, since Linux kernel categorizes the VXLAN driver as experimental &lt;3.9.</entry>
          </row>
          <row>
            <entry>iproute2</entry>
            <entry>matches kernel version</entry>
            <entry></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  
  <section id="vxlan-req-distribution">
    <title>Linux Distributions that meet the requirements</title> 
    <para>
      The following table lists distributions which meet requirements.
    </para>
    <table>
      <title>List of Linux distributions which meet the hypervisor requirements</title>
      <tgroup cols="4">
        <thead>
          <row>
            <entry>Distribution</entry>
            <entry>Release Version</entry>
            <entry>Kernel Version (Date confirmed)</entry>
            <entry>Note</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Ubuntu</entry>
            <entry>13.04</entry>
            <entry>3.8.0 (2013/07/23)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Fedora</entry>
            <entry>&gt;= 17</entry>
            <entry>3.9.10 (2013/07/23)</entry>
            <entry>Latest kernel packages are available in "update" repository.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section id="vxlan-confirm">
    <title>Check the capability of your system</title>
    <para>
      To check the capability of your system, execute the following commands.
    </para>
    <programlisting language="Bash">
$ sudo modprobe vxlan &amp;&amp; echo $?
# Confirm the output is "0".
# If it's non-0 value or error message, your kernel doesn't have VXLAN kernel module.

$ ip link add type vxlan help
# Confirm the output is usage of the command and that it's for VXLAN.
# If it's not, your iproute2 utility doesn't support VXLAN.
    </programlisting>
  </section>
  <section id="vxlan-req-build">
    <title>Advanced: Build kernel and iproute2</title>
    <para>
      Even if your system doesn't support VXLAN, you can compile the kernel and iproute2 by yourself.
      The following procedure is an example for CentOS 6.4.
    </para>
    <section id="vxlan-build-kernel">
      <title>Build kernel</title>
      <programlisting language="Bash">$ sudo yum groupinstall "Development Tools"
$ sudo yum install ncurses-devel hmaccalc zlib-devel binutils-devel elfutils-libelf-devel bc

$ KERNEL_VERSION=3.10.4
# Declare the kernel version you want to build.
        
$ wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-${KERNEL_VERSION}.tar.xz
$ tar xvf linux-${KERNEL_VERSION}.tar.xz
$ cd linux-${KERNEL_VERSION}
$ cp /boot/config-`uname -r` .config
$ make oldconfig
# You may keep hitting enter and choose the default.

$ make menuconfig
# Dig into "Device Drivers" -> "Network device support",
# then select "Virtual eXtensible Local Area Network (VXLAN)" and hit space.
# Make sure it indicates "&lt;M&gt;" (build as module), then Save and Exit.

# You may also want to check "IPv4 NAT" and its child nodes in "IP: Netfilter Configuration"
# and "IPv6 NAT" and its child nodes in "IPv6: Netfilter Configuration".
# In 3.10.4, you can find the options in
# "Networking support" -> "Networking options"
#   -> "Network packet filtering framework (Netfilter)".

$ make # -j N
# You may use -j N option to make the build process parallel and faster,
# generally N = 1 + (cores your machine have).

$ sudo make modules_install
$ sudo make install
# You would get an error like "ERROR: modinfo: could not find module XXXX" here.
# This happens mainly due to config structure changes between kernel versions.
# You can ignore this error, until you find you need the kernel module.
# If you feel uneasy, you can go back to make menuconfig,
# find module XXXX by using '/' key, enable the module, build and install the kernel again.

$ sudo vi /etc/grub.conf
# Make sure the new kernel isn't set as the default and the timeout is long enough,
# so you can select the new kernel during boot process.
# It's not a good idea to set the new kernel as the default until you confirm the kernel works fine.
         
$ sudo reboot
# Select the new kernel during the boot process.
      </programlisting>
    </section>
    <section id="vxlan-build-iproute2">
      <title>Build iproute2</title>
      <programlisting>$ sudo yum install db4-devel

$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/shemminger/iproute2.git
$ cd iproute2
$ git tag
# Find the version that matches the kernel.
# If you built kernel 3.10.4 as above, it would be v3.10.0.

$ git checkout v3.10.0
$ ./configure
$ make # -j N
$ sudo make install
      </programlisting>
      <note>
        <para>Please use rebuild kernel and tools at your own risk.</para>
      </note>
    </section>
  </section>
</chapter>
